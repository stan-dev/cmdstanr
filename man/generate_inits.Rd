% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inits.R
\name{generate_inits}
\alias{generate_inits}
\alias{generate_inits.draws}
\alias{generate_inits.CmdStanMCMC}
\alias{generate_inits.character}
\title{Generate initial values for Stan Models}
\usage{
generate_inits(object, ...)

\method{generate_inits}{draws}(object, variables = NULL, FUN = sample1, ...)

\method{generate_inits}{CmdStanMCMC}(
  object,
  variables = NULL,
  FUN = sample1,
  draws = "sampling",
  ...
)

\method{generate_inits}{character}(
  object,
  variables = NULL,
  FUN = sample1,
  draws = "sampling",
  ...
)
}
\arguments{
\item{object}{An object from which to generate initial values}

\item{...}{Additional arguments to be passed to the specific methods}

\item{variables}{A character vector of parameter names for which to generate
inits}

\item{FUN}{A function to apply to the draws to generate the inits. Only used
if draws = "all" or "sampling". It should be a function name that takes a
vector as input and returns a scalar, such as mean or median. The function
will be applied to each parameter's draws to generate the inits. The
default is to sample 1 random draw from the posterior draws}

\item{draws}{A character string. Either "last", "sampling" or "all". If
"last", only the last draw is used. If "sampling", all the draws from the
sampling phase are used. If "all", all the draws, including warmup, are
used.}
}
\value{
A list of lists of initial values for each chain
}
\description{
The \code{generate_inits()} methods generate a list of lists of initial values for
each chain to be used in initializing a model fit with Stan
}
\details{
The \code{generate_inits()} method is generic function to which specific
methods for different classes of objects can be written. In the \code{cmdstanr}
package, the following objects are supported:
\itemize{
\item A \code{CmdStanMCMC} object, which is the result of sampling from a Stan model with cmdstanr
\item A vector of file paths to the CSV files containing the draws from a Stan model
\item A draws object from the \code{posterior} package
}

For these objects, the function specified in \code{FUN} is applied to the
draws to generate the inits. This can be very flexible - any function works
as long as it returns a scalar and can be applied to a vector.
}
\examples{
\dontrun{
# inits from a CmdStanMCMC object
stanfit <- cmdstanr::cmdstanr_example("logistic")
generate_inits(stanfit)
generate_inits(stanfit, FUN = mean)
generate_inits(stanfit, FUN = quantile, probs = 0.5)
generate_inits(stanfit, draws = "last")

# inits from a vector of file paths
files <- stanfit$output_files()
generate_inits(files)

# inits from a draws object
draws <- stanfit$draws()
generate_inits(draws)

# warmup and then use the final draws for the inits of a separate sampling stage
warmup <- cmdstanr_example("logistic", parallel_chains = 4, iter_sampling = 0, save_warmup = T)
inits <- generate_inits(warmup, draws = "last")
mod <- cmdstan_model(exe_file = warmup$runset$exe_file())
fit <- mod$sample(warmup$data_file(),
                  parallel_chains = 4,
                  init = inits,
                  iter_warmup = 0,
                  inv_metric = warmup$inv_metric(matrix = FALSE),
                  step_size = warmup$metadata()$step_size_adaptation,
                  adapt_engaged = FALSE)

# compare with standard fitting with combined warmup and sampling
fit_standard <- mod$sample(warmup$data_file(),
                           parallel_chains = 4)
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-optimize}
\alias{model-method-optimize}
\title{Run Stan's optimization algorithms}
\description{
The \code{$optimize()} method of a \code{\link{CmdStanModel}} object runs
Stan's optimizer.
}
\details{
CmdStan can find the posterior mode (assuming there is one). If the
posterior is not convex, there is no guarantee Stan will be able to find
the global mode as opposed to a local optimum of log probability. For
optimization, the mode is calculated without the Jacobian adjustment for
constrained variables, which shifts the mode due to the change of
variables. Thus modes correspond to modes of the model as written.

-- \href{https://github.com/stan-dev/cmdstan/releases/latest}{CmdStan Interface User's Guide}
}
\section{Usage}{
\preformatted{$optimize(
  data = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_diagnostics = FALSE,
  algorithm = NULL,
  init_alpha = NULL,
  iter = NULL
)
}
}

\section{Arguments shared by all fitting methods}{
 The following arguments can
be specified for any of the fitting methods (\code{sample}, \code{optimize},
\code{variational}). Arguments left at \code{NULL} default to the default used by the
installed version of CmdStan.
\itemize{
\item \code{data}: (multiple options) The data to use. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is
then written to JSON for CmdStan using \code{\link[=write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See
the appendices in the CmdStan manual for details on using these formats.
}
\item \code{seed}: (positive integer) A seed for the (P)RNG to pass to CmdStan.
\item \code{refresh}: (non-negative integer) The number of iterations between
screen updates.
\item \code{init}: (multiple options) The initialization method:
\itemize{
\item A real number \code{x>0} initializes randomly between \code{[-x,x]} (on the
\emph{unconstrained} parameter space);
\item \code{0} initializes to \code{0};
\item A character vector of paths (one per chain) to JSON or Rdump files. See
\code{\link[=write_stan_json]{write_stan_json()}} to write \R objects to JSON files compatible with
CmdStan.
}
\item \code{save_diagnostics}: (logical) Should auxiliary diagnostic information
(beyond standard diagnostics) be written to temporary diagnostic CSV files?
This argument replaces CmdStan's \code{diagnostic_file} argument and the content
written to CSV is controlled by the user's CmdStan installation and not
CmdStanR (and for some algorithms no content may be written). The default
is \code{save_diagnostics=FALSE}, which is appropriate for almost every use case
(all diagnostics recommended for users to check are \emph{always} saved, e.g.,
divergences for HMC). To save the temporary files created when
\code{save_diagnostics=TRUE} see the
\code{\link[=fit-method-save_diagnostic_files]{$save_diagnostic_files()}} method.
}
}

\section{Arguments unique to the \code{optimize} method}{
 In addition to the
arguments above, the \code{$optimize()} method also has its own set of
arguments. These arguments are described briefly here and in greater detail
in the CmdStan manual. Arguments left at \code{NULL} default to the default used
by the installed version of CmdStan.
\itemize{
\item \code{algorithm}: (string) The optimization algorithm. One of \code{"lbfgs"},
\code{"bfgs"}, or \code{"newton"}.
\item \code{iter}: (positive integer) The number of iterations.
\item \code{init_alpha}: (non-negative real) The line search step size for first
iteration. Not applicable if \code{algorithm="newton"}.
}
}

\section{Value}{
 The \code{$optimize()} method returns a \code{\link{CmdStanMLE}} object.
}

\examples{
\dontrun{
# Set path to cmdstan
# (Note: if you installed CmdStan via install_cmdstan() with default settings
# then setting the path is unnecessary but the default below should still work.
# Otherwise use the `path` argument to specify the location of your
# CmdStan installation.)

set_cmdstan_path(path = NULL)

# Create a CmdStanModel object from a Stan program,
# here using the example model that comes with CmdStan
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program)
mod$print()

# Run sample method (MCMC via Stan's dynamic HMC/NUTS),
# specifying data as a named list (like RStan)
standata <- list(N = 10, y =c(0,1,0,0,0,0,0,0,0,1))
fit_mcmc <- mod$sample(data = standata, seed = 123, num_chains = 2)

# Call CmdStan's bin/stansummary
fit_mcmc$summary()

# Call CmdStan's bin/diagnose
fit_mcmc$diagnose()

# Run optimization method (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file (readable by CmdStan)
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.R")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)

#' Print estimates
fit_optim$summary()

# Run variational Bayes method (default is meanfield ADVI)
fit_vb <- mod$variational(data = standata, seed = 123)

# Call CmdStan's bin/summary
fit_vb$summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()
if (require(rstan, quietly = TRUE)) {
  stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())
  print(stanfit)
}

}

}
\seealso{
The CmdStanR website (\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr})
for online documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan doc (html or pdf): \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation/}
\item CmdStan doc (pdf): (\href{https://github.com/stan-dev/cmdstan/releases/latest}{github.com/stan-dev/cmdstan/releases/}).
}

Other CmdStanModel methods: \code{\link{model-method-compile}},
  \code{\link{model-method-sample}},
  \code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}

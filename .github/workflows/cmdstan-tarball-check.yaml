---
# Github Actions workflow to check CmdStanR tarball
# yamllint disable rule:line-length

name: Custom CmdStan tarball unit tests

'on':
  workflow_dispatch:
    inputs:
      tarball_url:
        description: 'CmdStan tarball URL to test with.'
        required: true
        default: 'latest'

jobs:
  tarball-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release', rtools: ''}
          - {os: windows-latest, r: 'release', rtools: '42'}
          - {os: ubuntu-20.04, r: 'release', rtools: ''}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CMDSTAN_TEST_TARBALL_URL: ${{ github.event.inputs.tarball_url }}
      NOT_CRAN: true

    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev || true
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev || true

      - uses: r-lib/actions/setup-r@v2.2.7
        with:
          r-version: ${{ matrix.config.r }}
          rtools-version: ${{ matrix.config.rtools }}

      - uses: r-lib/actions/setup-pandoc@v2.2.7

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_local(path = ".")
          cmdstanr::check_cmdstan_toolchain(fix = TRUE)
          if (Sys.getenv("CMDSTAN_TEST_TARBALL_URL") == "latest") {
            cmdstanr::install_cmdstan(cores = 2, overwrite = TRUE)
          } else {
            cmdstanr::install_cmdstan(cores = 2, overwrite = TRUE, release_url = "${{ github.event.inputs.tarball_url }}")
          }
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--ignore-vignettes"), build_args = c("--no-build-vignettes"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
